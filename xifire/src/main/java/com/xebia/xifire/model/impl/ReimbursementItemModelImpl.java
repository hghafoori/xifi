package com.xebia.xifire.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.xebia.xifire.model.ReimbursementItem;
import com.xebia.xifire.model.ReimbursementItemDocumentBlobModel;
import com.xebia.xifire.model.ReimbursementItemModel;
import com.xebia.xifire.service.ReimbursementItemLocalServiceUtil;

import java.io.Serializable;

import java.sql.Blob;
import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ReimbursementItem service. Represents a row in the &quot;reimbursement_item&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.xebia.xifire.model.ReimbursementItemModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReimbursementItemImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see ReimbursementItemImpl
 * @see com.xebia.xifire.model.ReimbursementItem
 * @see com.xebia.xifire.model.ReimbursementItemModel
 * @generated
 */
public class ReimbursementItemModelImpl extends BaseModelImpl<ReimbursementItem>
    implements ReimbursementItemModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a reimbursement item model instance should use the {@link com.xebia.xifire.model.ReimbursementItem} interface instead.
     */
    public static final String TABLE_NAME = "reimbursement_item";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "userReimbursementId", Types.BIGINT },
            { "billDate", Types.TIMESTAMP },
            { "description", Types.VARCHAR },
            { "billAmount", Types.INTEGER },
            { "billCategory", Types.VARCHAR },
            { "document", Types.BLOB }
        };
    public static final String TABLE_SQL_CREATE = "create table reimbursement_item (id_ LONG not null primary key,userReimbursementId LONG,billDate DATE null,description VARCHAR(75) null,billAmount INTEGER,billCategory VARCHAR(75) null,document BLOB)";
    public static final String TABLE_SQL_DROP = "drop table reimbursement_item";
    public static final String ORDER_BY_JPQL = " ORDER BY reimbursementItem.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY reimbursement_item.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.xebia.xifire.model.ReimbursementItem"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.xebia.xifire.model.ReimbursementItem"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = false;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.xebia.xifire.model.ReimbursementItem"));
    private static ClassLoader _classLoader = ReimbursementItem.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            ReimbursementItem.class
        };
    private long _id;
    private long _userReimbursementId;
    private Date _billDate;
    private String _description;
    private int _billAmount;
    private String _billCategory;
    private ReimbursementItemDocumentBlobModel _documentBlobModel;
    private ReimbursementItem _escapedModel;

    public ReimbursementItemModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return ReimbursementItem.class;
    }

    @Override
    public String getModelClassName() {
        return ReimbursementItem.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("userReimbursementId", getUserReimbursementId());
        attributes.put("billDate", getBillDate());
        attributes.put("description", getDescription());
        attributes.put("billAmount", getBillAmount());
        attributes.put("billCategory", getBillCategory());
        attributes.put("document", getDocument());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long userReimbursementId = (Long) attributes.get("userReimbursementId");

        if (userReimbursementId != null) {
            setUserReimbursementId(userReimbursementId);
        }

        Date billDate = (Date) attributes.get("billDate");

        if (billDate != null) {
            setBillDate(billDate);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        Integer billAmount = (Integer) attributes.get("billAmount");

        if (billAmount != null) {
            setBillAmount(billAmount);
        }

        String billCategory = (String) attributes.get("billCategory");

        if (billCategory != null) {
            setBillCategory(billCategory);
        }

        Blob document = (Blob) attributes.get("document");

        if (document != null) {
            setDocument(document);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public long getUserReimbursementId() {
        return _userReimbursementId;
    }

    @Override
    public void setUserReimbursementId(long userReimbursementId) {
        _userReimbursementId = userReimbursementId;
    }

    @Override
    public Date getBillDate() {
        return _billDate;
    }

    @Override
    public void setBillDate(Date billDate) {
        _billDate = billDate;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public int getBillAmount() {
        return _billAmount;
    }

    @Override
    public void setBillAmount(int billAmount) {
        _billAmount = billAmount;
    }

    @Override
    public String getBillCategory() {
        if (_billCategory == null) {
            return StringPool.BLANK;
        } else {
            return _billCategory;
        }
    }

    @Override
    public void setBillCategory(String billCategory) {
        _billCategory = billCategory;
    }

    @Override
    public Blob getDocument() {
        if (_documentBlobModel == null) {
            try {
                _documentBlobModel = ReimbursementItemLocalServiceUtil.getDocumentBlobModel(getPrimaryKey());
            } catch (Exception e) {
            }
        }

        Blob blob = null;

        if (_documentBlobModel != null) {
            blob = _documentBlobModel.getDocumentBlob();
        }

        return blob;
    }

    @Override
    public void setDocument(Blob document) {
        if (_documentBlobModel == null) {
            _documentBlobModel = new ReimbursementItemDocumentBlobModel(getPrimaryKey(),
                    document);
        } else {
            _documentBlobModel.setDocumentBlob(document);
        }
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            ReimbursementItem.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public ReimbursementItem toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (ReimbursementItem) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        ReimbursementItemImpl reimbursementItemImpl = new ReimbursementItemImpl();

        reimbursementItemImpl.setId(getId());
        reimbursementItemImpl.setUserReimbursementId(getUserReimbursementId());
        reimbursementItemImpl.setBillDate(getBillDate());
        reimbursementItemImpl.setDescription(getDescription());
        reimbursementItemImpl.setBillAmount(getBillAmount());
        reimbursementItemImpl.setBillCategory(getBillCategory());

        reimbursementItemImpl.resetOriginalValues();

        return reimbursementItemImpl;
    }

    @Override
    public int compareTo(ReimbursementItem reimbursementItem) {
        long primaryKey = reimbursementItem.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof ReimbursementItem)) {
            return false;
        }

        ReimbursementItem reimbursementItem = (ReimbursementItem) obj;

        long primaryKey = reimbursementItem.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        ReimbursementItemModelImpl reimbursementItemModelImpl = this;

        reimbursementItemModelImpl._documentBlobModel = null;
    }

    @Override
    public CacheModel<ReimbursementItem> toCacheModel() {
        ReimbursementItemCacheModel reimbursementItemCacheModel = new ReimbursementItemCacheModel();

        reimbursementItemCacheModel.id = getId();

        reimbursementItemCacheModel.userReimbursementId = getUserReimbursementId();

        Date billDate = getBillDate();

        if (billDate != null) {
            reimbursementItemCacheModel.billDate = billDate.getTime();
        } else {
            reimbursementItemCacheModel.billDate = Long.MIN_VALUE;
        }

        reimbursementItemCacheModel.description = getDescription();

        String description = reimbursementItemCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            reimbursementItemCacheModel.description = null;
        }

        reimbursementItemCacheModel.billAmount = getBillAmount();

        reimbursementItemCacheModel.billCategory = getBillCategory();

        String billCategory = reimbursementItemCacheModel.billCategory;

        if ((billCategory != null) && (billCategory.length() == 0)) {
            reimbursementItemCacheModel.billCategory = null;
        }

        return reimbursementItemCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(15);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", userReimbursementId=");
        sb.append(getUserReimbursementId());
        sb.append(", billDate=");
        sb.append(getBillDate());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", billAmount=");
        sb.append(getBillAmount());
        sb.append(", billCategory=");
        sb.append(getBillCategory());

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(25);

        sb.append("<model><model-name>");
        sb.append("com.xebia.xifire.model.ReimbursementItem");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userReimbursementId</column-name><column-value><![CDATA[");
        sb.append(getUserReimbursementId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>billDate</column-name><column-value><![CDATA[");
        sb.append(getBillDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>billAmount</column-name><column-value><![CDATA[");
        sb.append(getBillAmount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>billCategory</column-name><column-value><![CDATA[");
        sb.append(getBillCategory());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
