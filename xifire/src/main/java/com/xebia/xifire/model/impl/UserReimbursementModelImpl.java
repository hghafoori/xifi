package com.xebia.xifire.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import com.xebia.xifire.model.UserReimbursement;
import com.xebia.xifire.model.UserReimbursementModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the UserReimbursement service. Represents a row in the &quot;user_reimbursement&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.xebia.xifire.model.UserReimbursementModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserReimbursementImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserReimbursementImpl
 * @see com.xebia.xifire.model.UserReimbursement
 * @see com.xebia.xifire.model.UserReimbursementModel
 * @generated
 */
public class UserReimbursementModelImpl extends BaseModelImpl<UserReimbursement>
    implements UserReimbursementModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a user reimbursement model instance should use the {@link com.xebia.xifire.model.UserReimbursement} interface instead.
     */
    public static final String TABLE_NAME = "user_reimbursement";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.INTEGER },
            { "createDate", Types.TIMESTAMP },
            { "modifiedDate", Types.TIMESTAMP },
            { "userId", Types.INTEGER },
            { "description", Types.VARCHAR },
            { "status", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table user_reimbursement (id_ INTEGER not null primary key,createDate DATE null,modifiedDate DATE null,userId INTEGER,description VARCHAR(75) null,status VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table user_reimbursement";
    public static final String ORDER_BY_JPQL = " ORDER BY userReimbursement.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY user_reimbursement.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.xebia.xifire.model.UserReimbursement"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.xebia.xifire.model.UserReimbursement"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.xebia.xifire.model.UserReimbursement"),
            true);
    public static long USERID_COLUMN_BITMASK = 1L;
    public static long ID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.xebia.xifire.model.UserReimbursement"));
    private static ClassLoader _classLoader = UserReimbursement.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            UserReimbursement.class
        };
    private int _id;
    private Date _createDate;
    private Date _modifiedDate;
    private int _userId;
    private int _originalUserId;
    private boolean _setOriginalUserId;
    private String _description;
    private String _status;
    private long _columnBitmask;
    private UserReimbursement _escapedModel;

    public UserReimbursementModelImpl() {
    }

    @Override
    public int getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(int primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Integer) primaryKeyObj).intValue());
    }

    @Override
    public Class<?> getModelClass() {
        return UserReimbursement.class;
    }

    @Override
    public String getModelClassName() {
        return UserReimbursement.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("createDate", getCreateDate());
        attributes.put("modifiedDate", getModifiedDate());
        attributes.put("userId", getUserId());
        attributes.put("description", getDescription());
        attributes.put("status", getStatus());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Integer id = (Integer) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Date createDate = (Date) attributes.get("createDate");

        if (createDate != null) {
            setCreateDate(createDate);
        }

        Date modifiedDate = (Date) attributes.get("modifiedDate");

        if (modifiedDate != null) {
            setModifiedDate(modifiedDate);
        }

        Integer userId = (Integer) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String description = (String) attributes.get("description");

        if (description != null) {
            setDescription(description);
        }

        String status = (String) attributes.get("status");

        if (status != null) {
            setStatus(status);
        }
    }

    @Override
    public int getId() {
        return _id;
    }

    @Override
    public void setId(int id) {
        _id = id;
    }

    @Override
    public Date getCreateDate() {
        return _createDate;
    }

    @Override
    public void setCreateDate(Date createDate) {
        _createDate = createDate;
    }

    @Override
    public Date getModifiedDate() {
        return _modifiedDate;
    }

    @Override
    public void setModifiedDate(Date modifiedDate) {
        _modifiedDate = modifiedDate;
    }

    @Override
    public int getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(int userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    public int getOriginalUserId() {
        return _originalUserId;
    }

    @Override
    public String getDescription() {
        if (_description == null) {
            return StringPool.BLANK;
        } else {
            return _description;
        }
    }

    @Override
    public void setDescription(String description) {
        _description = description;
    }

    @Override
    public String getStatus() {
        if (_status == null) {
            return StringPool.BLANK;
        } else {
            return _status;
        }
    }

    @Override
    public void setStatus(String status) {
        _status = status;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public UserReimbursement toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (UserReimbursement) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        UserReimbursementImpl userReimbursementImpl = new UserReimbursementImpl();

        userReimbursementImpl.setId(getId());
        userReimbursementImpl.setCreateDate(getCreateDate());
        userReimbursementImpl.setModifiedDate(getModifiedDate());
        userReimbursementImpl.setUserId(getUserId());
        userReimbursementImpl.setDescription(getDescription());
        userReimbursementImpl.setStatus(getStatus());

        userReimbursementImpl.resetOriginalValues();

        return userReimbursementImpl;
    }

    @Override
    public int compareTo(UserReimbursement userReimbursement) {
        int primaryKey = userReimbursement.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof UserReimbursement)) {
            return false;
        }

        UserReimbursement userReimbursement = (UserReimbursement) obj;

        int primaryKey = userReimbursement.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        UserReimbursementModelImpl userReimbursementModelImpl = this;

        userReimbursementModelImpl._originalUserId = userReimbursementModelImpl._userId;

        userReimbursementModelImpl._setOriginalUserId = false;

        userReimbursementModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<UserReimbursement> toCacheModel() {
        UserReimbursementCacheModel userReimbursementCacheModel = new UserReimbursementCacheModel();

        userReimbursementCacheModel.id = getId();

        Date createDate = getCreateDate();

        if (createDate != null) {
            userReimbursementCacheModel.createDate = createDate.getTime();
        } else {
            userReimbursementCacheModel.createDate = Long.MIN_VALUE;
        }

        Date modifiedDate = getModifiedDate();

        if (modifiedDate != null) {
            userReimbursementCacheModel.modifiedDate = modifiedDate.getTime();
        } else {
            userReimbursementCacheModel.modifiedDate = Long.MIN_VALUE;
        }

        userReimbursementCacheModel.userId = getUserId();

        userReimbursementCacheModel.description = getDescription();

        String description = userReimbursementCacheModel.description;

        if ((description != null) && (description.length() == 0)) {
            userReimbursementCacheModel.description = null;
        }

        userReimbursementCacheModel.status = getStatus();

        String status = userReimbursementCacheModel.status;

        if ((status != null) && (status.length() == 0)) {
            userReimbursementCacheModel.status = null;
        }

        return userReimbursementCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(13);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", createDate=");
        sb.append(getCreateDate());
        sb.append(", modifiedDate=");
        sb.append(getModifiedDate());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", description=");
        sb.append(getDescription());
        sb.append(", status=");
        sb.append(getStatus());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(22);

        sb.append("<model><model-name>");
        sb.append("com.xebia.xifire.model.UserReimbursement");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>createDate</column-name><column-value><![CDATA[");
        sb.append(getCreateDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
        sb.append(getModifiedDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>description</column-name><column-value><![CDATA[");
        sb.append(getDescription());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>status</column-name><column-value><![CDATA[");
        sb.append(getStatus());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
