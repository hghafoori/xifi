package com.xebia.xifire.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.xebia.xifire.model.Salary;
import com.xebia.xifire.model.SalaryModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Salary service. Represents a row in the &quot;salary&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.xebia.xifire.model.SalaryModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SalaryImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SalaryImpl
 * @see com.xebia.xifire.model.Salary
 * @see com.xebia.xifire.model.SalaryModel
 * @generated
 */
public class SalaryModelImpl extends BaseModelImpl<Salary>
    implements SalaryModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a salary model instance should use the {@link com.xebia.xifire.model.Salary} interface instead.
     */
    public static final String TABLE_NAME = "salary";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "salaryMonth", Types.INTEGER },
            { "salaryYear", Types.INTEGER },
            { "basic", Types.INTEGER },
            { "arrears", Types.INTEGER },
            { "others", Types.INTEGER },
            { "tds", Types.INTEGER },
            { "lta", Types.INTEGER },
            { "HRA", Types.INTEGER },
            { "specialAllowance", Types.INTEGER },
            { "attireAllowance", Types.INTEGER },
            { "foodAllowance", Types.INTEGER },
            { "educationCess", Types.INTEGER },
            { "pf", Types.INTEGER },
            { "epf", Types.INTEGER },
            { "laborWelfare", Types.INTEGER },
            { "mediclaim", Types.INTEGER },
            { "otherDeduction", Types.INTEGER }
        };
    public static final String TABLE_SQL_CREATE = "create table salary (id_ LONG not null primary key,userId LONG,salaryMonth INTEGER,salaryYear INTEGER,basic INTEGER,arrears INTEGER,others INTEGER,tds INTEGER,lta INTEGER,HRA INTEGER,specialAllowance INTEGER,attireAllowance INTEGER,foodAllowance INTEGER,educationCess INTEGER,pf INTEGER,epf INTEGER,laborWelfare INTEGER,mediclaim INTEGER,otherDeduction INTEGER)";
    public static final String TABLE_SQL_DROP = "drop table salary";
    public static final String ORDER_BY_JPQL = " ORDER BY salary.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY salary.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.xebia.xifire.model.Salary"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.xebia.xifire.model.Salary"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.xebia.xifire.model.Salary"),
            true);
    public static long SALARYMONTH_COLUMN_BITMASK = 1L;
    public static long SALARYYEAR_COLUMN_BITMASK = 2L;
    public static long USERID_COLUMN_BITMASK = 4L;
    public static long ID_COLUMN_BITMASK = 8L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.xebia.xifire.model.Salary"));
    private static ClassLoader _classLoader = Salary.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Salary.class };
    private long _id;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private int _salaryMonth;
    private int _originalSalaryMonth;
    private boolean _setOriginalSalaryMonth;
    private int _salaryYear;
    private int _originalSalaryYear;
    private boolean _setOriginalSalaryYear;
    private int _basic;
    private int _arrears;
    private int _others;
    private int _tds;
    private int _lta;
    private int _HRA;
    private int _specialAllowance;
    private int _attireAllowance;
    private int _foodAllowance;
    private int _educationCess;
    private int _pf;
    private int _epf;
    private int _laborWelfare;
    private int _mediclaim;
    private int _otherDeduction;
    private long _columnBitmask;
    private Salary _escapedModel;

    public SalaryModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Salary.class;
    }

    @Override
    public String getModelClassName() {
        return Salary.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("userId", getUserId());
        attributes.put("salaryMonth", getSalaryMonth());
        attributes.put("salaryYear", getSalaryYear());
        attributes.put("basic", getBasic());
        attributes.put("arrears", getArrears());
        attributes.put("others", getOthers());
        attributes.put("tds", getTds());
        attributes.put("lta", getLta());
        attributes.put("HRA", getHRA());
        attributes.put("specialAllowance", getSpecialAllowance());
        attributes.put("attireAllowance", getAttireAllowance());
        attributes.put("foodAllowance", getFoodAllowance());
        attributes.put("educationCess", getEducationCess());
        attributes.put("pf", getPf());
        attributes.put("epf", getEpf());
        attributes.put("laborWelfare", getLaborWelfare());
        attributes.put("mediclaim", getMediclaim());
        attributes.put("otherDeduction", getOtherDeduction());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        Integer salaryMonth = (Integer) attributes.get("salaryMonth");

        if (salaryMonth != null) {
            setSalaryMonth(salaryMonth);
        }

        Integer salaryYear = (Integer) attributes.get("salaryYear");

        if (salaryYear != null) {
            setSalaryYear(salaryYear);
        }

        Integer basic = (Integer) attributes.get("basic");

        if (basic != null) {
            setBasic(basic);
        }

        Integer arrears = (Integer) attributes.get("arrears");

        if (arrears != null) {
            setArrears(arrears);
        }

        Integer others = (Integer) attributes.get("others");

        if (others != null) {
            setOthers(others);
        }

        Integer tds = (Integer) attributes.get("tds");

        if (tds != null) {
            setTds(tds);
        }

        Integer lta = (Integer) attributes.get("lta");

        if (lta != null) {
            setLta(lta);
        }

        Integer HRA = (Integer) attributes.get("HRA");

        if (HRA != null) {
            setHRA(HRA);
        }

        Integer specialAllowance = (Integer) attributes.get("specialAllowance");

        if (specialAllowance != null) {
            setSpecialAllowance(specialAllowance);
        }

        Integer attireAllowance = (Integer) attributes.get("attireAllowance");

        if (attireAllowance != null) {
            setAttireAllowance(attireAllowance);
        }

        Integer foodAllowance = (Integer) attributes.get("foodAllowance");

        if (foodAllowance != null) {
            setFoodAllowance(foodAllowance);
        }

        Integer educationCess = (Integer) attributes.get("educationCess");

        if (educationCess != null) {
            setEducationCess(educationCess);
        }

        Integer pf = (Integer) attributes.get("pf");

        if (pf != null) {
            setPf(pf);
        }

        Integer epf = (Integer) attributes.get("epf");

        if (epf != null) {
            setEpf(epf);
        }

        Integer laborWelfare = (Integer) attributes.get("laborWelfare");

        if (laborWelfare != null) {
            setLaborWelfare(laborWelfare);
        }

        Integer mediclaim = (Integer) attributes.get("mediclaim");

        if (mediclaim != null) {
            setMediclaim(mediclaim);
        }

        Integer otherDeduction = (Integer) attributes.get("otherDeduction");

        if (otherDeduction != null) {
            setOtherDeduction(otherDeduction);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @Override
    public int getSalaryMonth() {
        return _salaryMonth;
    }

    @Override
    public void setSalaryMonth(int salaryMonth) {
        _columnBitmask |= SALARYMONTH_COLUMN_BITMASK;

        if (!_setOriginalSalaryMonth) {
            _setOriginalSalaryMonth = true;

            _originalSalaryMonth = _salaryMonth;
        }

        _salaryMonth = salaryMonth;
    }

    public int getOriginalSalaryMonth() {
        return _originalSalaryMonth;
    }

    @Override
    public int getSalaryYear() {
        return _salaryYear;
    }

    @Override
    public void setSalaryYear(int salaryYear) {
        _columnBitmask |= SALARYYEAR_COLUMN_BITMASK;

        if (!_setOriginalSalaryYear) {
            _setOriginalSalaryYear = true;

            _originalSalaryYear = _salaryYear;
        }

        _salaryYear = salaryYear;
    }

    public int getOriginalSalaryYear() {
        return _originalSalaryYear;
    }

    @Override
    public int getBasic() {
        return _basic;
    }

    @Override
    public void setBasic(int basic) {
        _basic = basic;
    }

    @Override
    public int getArrears() {
        return _arrears;
    }

    @Override
    public void setArrears(int arrears) {
        _arrears = arrears;
    }

    @Override
    public int getOthers() {
        return _others;
    }

    @Override
    public void setOthers(int others) {
        _others = others;
    }

    @Override
    public int getTds() {
        return _tds;
    }

    @Override
    public void setTds(int tds) {
        _tds = tds;
    }

    @Override
    public int getLta() {
        return _lta;
    }

    @Override
    public void setLta(int lta) {
        _lta = lta;
    }

    @Override
    public int getHRA() {
        return _HRA;
    }

    @Override
    public void setHRA(int HRA) {
        _HRA = HRA;
    }

    @Override
    public int getSpecialAllowance() {
        return _specialAllowance;
    }

    @Override
    public void setSpecialAllowance(int specialAllowance) {
        _specialAllowance = specialAllowance;
    }

    @Override
    public int getAttireAllowance() {
        return _attireAllowance;
    }

    @Override
    public void setAttireAllowance(int attireAllowance) {
        _attireAllowance = attireAllowance;
    }

    @Override
    public int getFoodAllowance() {
        return _foodAllowance;
    }

    @Override
    public void setFoodAllowance(int foodAllowance) {
        _foodAllowance = foodAllowance;
    }

    @Override
    public int getEducationCess() {
        return _educationCess;
    }

    @Override
    public void setEducationCess(int educationCess) {
        _educationCess = educationCess;
    }

    @Override
    public int getPf() {
        return _pf;
    }

    @Override
    public void setPf(int pf) {
        _pf = pf;
    }

    @Override
    public int getEpf() {
        return _epf;
    }

    @Override
    public void setEpf(int epf) {
        _epf = epf;
    }

    @Override
    public int getLaborWelfare() {
        return _laborWelfare;
    }

    @Override
    public void setLaborWelfare(int laborWelfare) {
        _laborWelfare = laborWelfare;
    }

    @Override
    public int getMediclaim() {
        return _mediclaim;
    }

    @Override
    public void setMediclaim(int mediclaim) {
        _mediclaim = mediclaim;
    }

    @Override
    public int getOtherDeduction() {
        return _otherDeduction;
    }

    @Override
    public void setOtherDeduction(int otherDeduction) {
        _otherDeduction = otherDeduction;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Salary.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Salary toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Salary) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        SalaryImpl salaryImpl = new SalaryImpl();

        salaryImpl.setId(getId());
        salaryImpl.setUserId(getUserId());
        salaryImpl.setSalaryMonth(getSalaryMonth());
        salaryImpl.setSalaryYear(getSalaryYear());
        salaryImpl.setBasic(getBasic());
        salaryImpl.setArrears(getArrears());
        salaryImpl.setOthers(getOthers());
        salaryImpl.setTds(getTds());
        salaryImpl.setLta(getLta());
        salaryImpl.setHRA(getHRA());
        salaryImpl.setSpecialAllowance(getSpecialAllowance());
        salaryImpl.setAttireAllowance(getAttireAllowance());
        salaryImpl.setFoodAllowance(getFoodAllowance());
        salaryImpl.setEducationCess(getEducationCess());
        salaryImpl.setPf(getPf());
        salaryImpl.setEpf(getEpf());
        salaryImpl.setLaborWelfare(getLaborWelfare());
        salaryImpl.setMediclaim(getMediclaim());
        salaryImpl.setOtherDeduction(getOtherDeduction());

        salaryImpl.resetOriginalValues();

        return salaryImpl;
    }

    @Override
    public int compareTo(Salary salary) {
        long primaryKey = salary.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Salary)) {
            return false;
        }

        Salary salary = (Salary) obj;

        long primaryKey = salary.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        SalaryModelImpl salaryModelImpl = this;

        salaryModelImpl._originalUserId = salaryModelImpl._userId;

        salaryModelImpl._setOriginalUserId = false;

        salaryModelImpl._originalSalaryMonth = salaryModelImpl._salaryMonth;

        salaryModelImpl._setOriginalSalaryMonth = false;

        salaryModelImpl._originalSalaryYear = salaryModelImpl._salaryYear;

        salaryModelImpl._setOriginalSalaryYear = false;

        salaryModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Salary> toCacheModel() {
        SalaryCacheModel salaryCacheModel = new SalaryCacheModel();

        salaryCacheModel.id = getId();

        salaryCacheModel.userId = getUserId();

        salaryCacheModel.salaryMonth = getSalaryMonth();

        salaryCacheModel.salaryYear = getSalaryYear();

        salaryCacheModel.basic = getBasic();

        salaryCacheModel.arrears = getArrears();

        salaryCacheModel.others = getOthers();

        salaryCacheModel.tds = getTds();

        salaryCacheModel.lta = getLta();

        salaryCacheModel.HRA = getHRA();

        salaryCacheModel.specialAllowance = getSpecialAllowance();

        salaryCacheModel.attireAllowance = getAttireAllowance();

        salaryCacheModel.foodAllowance = getFoodAllowance();

        salaryCacheModel.educationCess = getEducationCess();

        salaryCacheModel.pf = getPf();

        salaryCacheModel.epf = getEpf();

        salaryCacheModel.laborWelfare = getLaborWelfare();

        salaryCacheModel.mediclaim = getMediclaim();

        salaryCacheModel.otherDeduction = getOtherDeduction();

        return salaryCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(39);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", salaryMonth=");
        sb.append(getSalaryMonth());
        sb.append(", salaryYear=");
        sb.append(getSalaryYear());
        sb.append(", basic=");
        sb.append(getBasic());
        sb.append(", arrears=");
        sb.append(getArrears());
        sb.append(", others=");
        sb.append(getOthers());
        sb.append(", tds=");
        sb.append(getTds());
        sb.append(", lta=");
        sb.append(getLta());
        sb.append(", HRA=");
        sb.append(getHRA());
        sb.append(", specialAllowance=");
        sb.append(getSpecialAllowance());
        sb.append(", attireAllowance=");
        sb.append(getAttireAllowance());
        sb.append(", foodAllowance=");
        sb.append(getFoodAllowance());
        sb.append(", educationCess=");
        sb.append(getEducationCess());
        sb.append(", pf=");
        sb.append(getPf());
        sb.append(", epf=");
        sb.append(getEpf());
        sb.append(", laborWelfare=");
        sb.append(getLaborWelfare());
        sb.append(", mediclaim=");
        sb.append(getMediclaim());
        sb.append(", otherDeduction=");
        sb.append(getOtherDeduction());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(61);

        sb.append("<model><model-name>");
        sb.append("com.xebia.xifire.model.Salary");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salaryMonth</column-name><column-value><![CDATA[");
        sb.append(getSalaryMonth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salaryYear</column-name><column-value><![CDATA[");
        sb.append(getSalaryYear());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>basic</column-name><column-value><![CDATA[");
        sb.append(getBasic());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>arrears</column-name><column-value><![CDATA[");
        sb.append(getArrears());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>others</column-name><column-value><![CDATA[");
        sb.append(getOthers());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>tds</column-name><column-value><![CDATA[");
        sb.append(getTds());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lta</column-name><column-value><![CDATA[");
        sb.append(getLta());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>HRA</column-name><column-value><![CDATA[");
        sb.append(getHRA());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>specialAllowance</column-name><column-value><![CDATA[");
        sb.append(getSpecialAllowance());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>attireAllowance</column-name><column-value><![CDATA[");
        sb.append(getAttireAllowance());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>foodAllowance</column-name><column-value><![CDATA[");
        sb.append(getFoodAllowance());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>educationCess</column-name><column-value><![CDATA[");
        sb.append(getEducationCess());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pf</column-name><column-value><![CDATA[");
        sb.append(getPf());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>epf</column-name><column-value><![CDATA[");
        sb.append(getEpf());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>laborWelfare</column-name><column-value><![CDATA[");
        sb.append(getLaborWelfare());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>mediclaim</column-name><column-value><![CDATA[");
        sb.append(getMediclaim());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>otherDeduction</column-name><column-value><![CDATA[");
        sb.append(getOtherDeduction());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
