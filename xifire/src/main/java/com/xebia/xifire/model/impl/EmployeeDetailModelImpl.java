package com.xebia.xifire.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.xebia.xifire.model.EmployeeDetail;
import com.xebia.xifire.model.EmployeeDetailModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the EmployeeDetail service. Represents a row in the &quot;employee_detail&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.xebia.xifire.model.EmployeeDetailModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link EmployeeDetailImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see EmployeeDetailImpl
 * @see com.xebia.xifire.model.EmployeeDetail
 * @see com.xebia.xifire.model.EmployeeDetailModel
 * @generated
 */
public class EmployeeDetailModelImpl extends BaseModelImpl<EmployeeDetail>
    implements EmployeeDetailModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a employee detail model instance should use the {@link com.xebia.xifire.model.EmployeeDetail} interface instead.
     */
    public static final String TABLE_NAME = "employee_detail";
    public static final Object[][] TABLE_COLUMNS = {
            { "id_", Types.BIGINT },
            { "userId", Types.BIGINT },
            { "employeeCode", Types.VARCHAR },
            { "designation", Types.VARCHAR },
            { "location", Types.VARCHAR },
            { "department", Types.VARCHAR },
            { "pfNumber", Types.VARCHAR },
            { "doj", Types.TIMESTAMP },
            { "bankAccount", Types.VARCHAR },
            { "panNumber", Types.VARCHAR }
        };
    public static final String TABLE_SQL_CREATE = "create table employee_detail (id_ LONG not null primary key,userId LONG,employeeCode VARCHAR(75) null,designation VARCHAR(75) null,location VARCHAR(75) null,department VARCHAR(75) null,pfNumber VARCHAR(75) null,doj DATE null,bankAccount VARCHAR(75) null,panNumber VARCHAR(75) null)";
    public static final String TABLE_SQL_DROP = "drop table employee_detail";
    public static final String ORDER_BY_JPQL = " ORDER BY employeeDetail.id ASC";
    public static final String ORDER_BY_SQL = " ORDER BY employee_detail.id_ ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.xebia.xifire.model.EmployeeDetail"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.xebia.xifire.model.EmployeeDetail"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.xebia.xifire.model.EmployeeDetail"),
            true);
    public static long USERID_COLUMN_BITMASK = 1L;
    public static long ID_COLUMN_BITMASK = 2L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.xebia.xifire.model.EmployeeDetail"));
    private static ClassLoader _classLoader = EmployeeDetail.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] {
            EmployeeDetail.class
        };
    private long _id;
    private long _userId;
    private String _userUuid;
    private long _originalUserId;
    private boolean _setOriginalUserId;
    private String _employeeCode;
    private String _designation;
    private String _location;
    private String _department;
    private String _pfNumber;
    private Date _doj;
    private String _bankAccount;
    private String _panNumber;
    private long _columnBitmask;
    private EmployeeDetail _escapedModel;

    public EmployeeDetailModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _id;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _id;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return EmployeeDetail.class;
    }

    @Override
    public String getModelClassName() {
        return EmployeeDetail.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("id", getId());
        attributes.put("userId", getUserId());
        attributes.put("employeeCode", getEmployeeCode());
        attributes.put("designation", getDesignation());
        attributes.put("location", getLocation());
        attributes.put("department", getDepartment());
        attributes.put("pfNumber", getPfNumber());
        attributes.put("doj", getDoj());
        attributes.put("bankAccount", getBankAccount());
        attributes.put("panNumber", getPanNumber());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long id = (Long) attributes.get("id");

        if (id != null) {
            setId(id);
        }

        Long userId = (Long) attributes.get("userId");

        if (userId != null) {
            setUserId(userId);
        }

        String employeeCode = (String) attributes.get("employeeCode");

        if (employeeCode != null) {
            setEmployeeCode(employeeCode);
        }

        String designation = (String) attributes.get("designation");

        if (designation != null) {
            setDesignation(designation);
        }

        String location = (String) attributes.get("location");

        if (location != null) {
            setLocation(location);
        }

        String department = (String) attributes.get("department");

        if (department != null) {
            setDepartment(department);
        }

        String pfNumber = (String) attributes.get("pfNumber");

        if (pfNumber != null) {
            setPfNumber(pfNumber);
        }

        Date doj = (Date) attributes.get("doj");

        if (doj != null) {
            setDoj(doj);
        }

        String bankAccount = (String) attributes.get("bankAccount");

        if (bankAccount != null) {
            setBankAccount(bankAccount);
        }

        String panNumber = (String) attributes.get("panNumber");

        if (panNumber != null) {
            setPanNumber(panNumber);
        }
    }

    @Override
    public long getId() {
        return _id;
    }

    @Override
    public void setId(long id) {
        _id = id;
    }

    @Override
    public long getUserId() {
        return _userId;
    }

    @Override
    public void setUserId(long userId) {
        _columnBitmask |= USERID_COLUMN_BITMASK;

        if (!_setOriginalUserId) {
            _setOriginalUserId = true;

            _originalUserId = _userId;
        }

        _userId = userId;
    }

    @Override
    public String getUserUuid() throws SystemException {
        return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
    }

    @Override
    public void setUserUuid(String userUuid) {
        _userUuid = userUuid;
    }

    public long getOriginalUserId() {
        return _originalUserId;
    }

    @Override
    public String getEmployeeCode() {
        if (_employeeCode == null) {
            return StringPool.BLANK;
        } else {
            return _employeeCode;
        }
    }

    @Override
    public void setEmployeeCode(String employeeCode) {
        _employeeCode = employeeCode;
    }

    @Override
    public String getDesignation() {
        if (_designation == null) {
            return StringPool.BLANK;
        } else {
            return _designation;
        }
    }

    @Override
    public void setDesignation(String designation) {
        _designation = designation;
    }

    @Override
    public String getLocation() {
        if (_location == null) {
            return StringPool.BLANK;
        } else {
            return _location;
        }
    }

    @Override
    public void setLocation(String location) {
        _location = location;
    }

    @Override
    public String getDepartment() {
        if (_department == null) {
            return StringPool.BLANK;
        } else {
            return _department;
        }
    }

    @Override
    public void setDepartment(String department) {
        _department = department;
    }

    @Override
    public String getPfNumber() {
        if (_pfNumber == null) {
            return StringPool.BLANK;
        } else {
            return _pfNumber;
        }
    }

    @Override
    public void setPfNumber(String pfNumber) {
        _pfNumber = pfNumber;
    }

    @Override
    public Date getDoj() {
        return _doj;
    }

    @Override
    public void setDoj(Date doj) {
        _doj = doj;
    }

    @Override
    public String getBankAccount() {
        if (_bankAccount == null) {
            return StringPool.BLANK;
        } else {
            return _bankAccount;
        }
    }

    @Override
    public void setBankAccount(String bankAccount) {
        _bankAccount = bankAccount;
    }

    @Override
    public String getPanNumber() {
        if (_panNumber == null) {
            return StringPool.BLANK;
        } else {
            return _panNumber;
        }
    }

    @Override
    public void setPanNumber(String panNumber) {
        _panNumber = panNumber;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            EmployeeDetail.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public EmployeeDetail toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (EmployeeDetail) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        EmployeeDetailImpl employeeDetailImpl = new EmployeeDetailImpl();

        employeeDetailImpl.setId(getId());
        employeeDetailImpl.setUserId(getUserId());
        employeeDetailImpl.setEmployeeCode(getEmployeeCode());
        employeeDetailImpl.setDesignation(getDesignation());
        employeeDetailImpl.setLocation(getLocation());
        employeeDetailImpl.setDepartment(getDepartment());
        employeeDetailImpl.setPfNumber(getPfNumber());
        employeeDetailImpl.setDoj(getDoj());
        employeeDetailImpl.setBankAccount(getBankAccount());
        employeeDetailImpl.setPanNumber(getPanNumber());

        employeeDetailImpl.resetOriginalValues();

        return employeeDetailImpl;
    }

    @Override
    public int compareTo(EmployeeDetail employeeDetail) {
        long primaryKey = employeeDetail.getPrimaryKey();

        if (getPrimaryKey() < primaryKey) {
            return -1;
        } else if (getPrimaryKey() > primaryKey) {
            return 1;
        } else {
            return 0;
        }
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof EmployeeDetail)) {
            return false;
        }

        EmployeeDetail employeeDetail = (EmployeeDetail) obj;

        long primaryKey = employeeDetail.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        EmployeeDetailModelImpl employeeDetailModelImpl = this;

        employeeDetailModelImpl._originalUserId = employeeDetailModelImpl._userId;

        employeeDetailModelImpl._setOriginalUserId = false;

        employeeDetailModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<EmployeeDetail> toCacheModel() {
        EmployeeDetailCacheModel employeeDetailCacheModel = new EmployeeDetailCacheModel();

        employeeDetailCacheModel.id = getId();

        employeeDetailCacheModel.userId = getUserId();

        employeeDetailCacheModel.employeeCode = getEmployeeCode();

        String employeeCode = employeeDetailCacheModel.employeeCode;

        if ((employeeCode != null) && (employeeCode.length() == 0)) {
            employeeDetailCacheModel.employeeCode = null;
        }

        employeeDetailCacheModel.designation = getDesignation();

        String designation = employeeDetailCacheModel.designation;

        if ((designation != null) && (designation.length() == 0)) {
            employeeDetailCacheModel.designation = null;
        }

        employeeDetailCacheModel.location = getLocation();

        String location = employeeDetailCacheModel.location;

        if ((location != null) && (location.length() == 0)) {
            employeeDetailCacheModel.location = null;
        }

        employeeDetailCacheModel.department = getDepartment();

        String department = employeeDetailCacheModel.department;

        if ((department != null) && (department.length() == 0)) {
            employeeDetailCacheModel.department = null;
        }

        employeeDetailCacheModel.pfNumber = getPfNumber();

        String pfNumber = employeeDetailCacheModel.pfNumber;

        if ((pfNumber != null) && (pfNumber.length() == 0)) {
            employeeDetailCacheModel.pfNumber = null;
        }

        Date doj = getDoj();

        if (doj != null) {
            employeeDetailCacheModel.doj = doj.getTime();
        } else {
            employeeDetailCacheModel.doj = Long.MIN_VALUE;
        }

        employeeDetailCacheModel.bankAccount = getBankAccount();

        String bankAccount = employeeDetailCacheModel.bankAccount;

        if ((bankAccount != null) && (bankAccount.length() == 0)) {
            employeeDetailCacheModel.bankAccount = null;
        }

        employeeDetailCacheModel.panNumber = getPanNumber();

        String panNumber = employeeDetailCacheModel.panNumber;

        if ((panNumber != null) && (panNumber.length() == 0)) {
            employeeDetailCacheModel.panNumber = null;
        }

        return employeeDetailCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(21);

        sb.append("{id=");
        sb.append(getId());
        sb.append(", userId=");
        sb.append(getUserId());
        sb.append(", employeeCode=");
        sb.append(getEmployeeCode());
        sb.append(", designation=");
        sb.append(getDesignation());
        sb.append(", location=");
        sb.append(getLocation());
        sb.append(", department=");
        sb.append(getDepartment());
        sb.append(", pfNumber=");
        sb.append(getPfNumber());
        sb.append(", doj=");
        sb.append(getDoj());
        sb.append(", bankAccount=");
        sb.append(getBankAccount());
        sb.append(", panNumber=");
        sb.append(getPanNumber());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(34);

        sb.append("<model><model-name>");
        sb.append("com.xebia.xifire.model.EmployeeDetail");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>id</column-name><column-value><![CDATA[");
        sb.append(getId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>userId</column-name><column-value><![CDATA[");
        sb.append(getUserId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employeeCode</column-name><column-value><![CDATA[");
        sb.append(getEmployeeCode());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>designation</column-name><column-value><![CDATA[");
        sb.append(getDesignation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>location</column-name><column-value><![CDATA[");
        sb.append(getLocation());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>department</column-name><column-value><![CDATA[");
        sb.append(getDepartment());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>pfNumber</column-name><column-value><![CDATA[");
        sb.append(getPfNumber());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>doj</column-name><column-value><![CDATA[");
        sb.append(getDoj());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bankAccount</column-name><column-value><![CDATA[");
        sb.append(getBankAccount());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>panNumber</column-name><column-value><![CDATA[");
        sb.append(getPanNumber());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
